{"version":3,"sources":["enums.tsx","Components/TodoItem.tsx","Components/TodoList.tsx","Components/TodosFilter.tsx","Components/TodoApp.tsx","API.tsx","Components/App.tsx","index.tsx"],"names":["Filter","TodoItem","todo","index","destroyHandler","toggleClass","changeTodo","useState","editedTodoIndex","setEditedTodoIndex","editedValue","setEditedValue","editStartHandler","indexEdit","className","classNames","completed","editing","type","checked","onChange","htmlFor","onDoubleClick","title","onClick","ref","input","focus","id","value","e","target","onBlur","length","trim","onKeyDown","key","TodoList","todoList","toggleAll","map","TodosFilter","clearHandler","filter","itemsLeft","to","All","Active","Completed","find","TodoApp","todoFilter","useParams","inputValue","setInputValue","todoListString","localStorage","getItem","JSON","parse","getTodoList","setTodoList","todoListSelected","setTodoListSelected","useEffect","setItem","stringify","saveTodoList","onSubmit","preventDefault","Date","placeholder","filtered","_el","i","updatedTodoList","todoValue","todoListCopy","isCompleted","undefined","todoListToggled","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70de21aa.chunk.js","sourcesContent":["export enum Filter {\n  All = '',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  todo: Todo,\n  index: number,\n  destroyHandler: (index: number) => void,\n  toggleClass: (index: number) => void,\n  changeTodo: (todoValue: string, index: number) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  index,\n  destroyHandler,\n  toggleClass,\n  changeTodo,\n}) => {\n  const [editedTodoIndex, setEditedTodoIndex] = useState(-1);\n  const [editedValue, setEditedValue] = useState('');\n\n  const editStartHandler = (indexEdit: React.SetStateAction<number>) => {\n    setEditedTodoIndex(indexEdit);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: editedTodoIndex === index,\n      })}\n      key={todo.id}\n      data-cy=\"toggleAll\"\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          className=\"toggle\"\n          onChange={() => {\n            toggleClass(index);\n          }}\n        />\n        <label\n          htmlFor=\"toggle-view\"\n          onDoubleClick={() => {\n            editStartHandler(index);\n            setEditedValue(todo.title);\n          }}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"Delete todo\"\n          onClick={() => {\n            destroyHandler(index);\n          }}\n        />\n      </div>\n      <input\n        ref={input => input && input.focus()}\n        type=\"text\"\n        id=\"editTodo\"\n        value={editedValue}\n        className=\"edit\"\n        onChange={(e) => {\n          setEditedValue(e.target.value);\n        }}\n        onBlur={(e) => {\n          const target = e.target as HTMLInputElement;\n\n          if (editedTodoIndex === -1) {\n            return;\n          }\n\n          if (\n            target.value.length !== 0\n            && target.value.trim() !== ''\n          ) {\n            editStartHandler(-1);\n            changeTodo(editedValue, index);\n          } else {\n            editStartHandler(-1);\n            destroyHandler(index);\n          }\n        }}\n        onKeyDown={(e) => {\n          const target = e.target as HTMLInputElement;\n\n          if (e.key === 'Enter') {\n            if (\n              target.value.length !== 0\n              && target.value.trim() !== ''\n            ) {\n              editStartHandler(-1);\n              changeTodo(editedValue, index);\n            } else {\n              editStartHandler(-1);\n              destroyHandler(index);\n            }\n          }\n\n          if (e.type === 'keydown' && e.key === 'Escape') {\n            editStartHandler(-1);\n          }\n        }}\n      />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todoList: Todo[];\n  destroyHandler: (index: number) => void,\n  toggleClass: (index: number) => void,\n  changeTodo: (todoValue: string, index: number) => void,\n  toggleAll: () => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todoList,\n  destroyHandler,\n  toggleClass,\n  changeTodo,\n  toggleAll,\n}) => {\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n      />\n      <label\n        onClick={toggleAll}\n        htmlFor=\"toggle-all\"\n      >\n        Mark all as complete\n\n      </label>\n      <ul className=\"todo-list\" data-cy=\"todoList\">\n        {todoList.map((todo, index) => (\n          <TodoItem\n            todo={todo}\n            index={index}\n            destroyHandler={destroyHandler}\n            toggleClass={toggleClass}\n            changeTodo={changeTodo}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Filter } from '../enums';\n\ntype Props = {\n  todoList: Todo[];\n  clearHandler: () => void;\n  filter: string | undefined;\n};\n\nexport const TodosFilter: React.FC<Props> = ({\n  todoList,\n  clearHandler,\n  filter,\n}) => {\n  const itemsLeft = todoList.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {itemsLeft === 1 ? `${itemsLeft} item left` : `${itemsLeft} items left`}\n      </span>\n\n      <ul className=\"filters\">\n\n        <li>\n          <Link\n            to={Filter.All}\n            className={\n              (filter !== Filter.Active && filter !== Filter.Completed)\n                ? 'selected'\n                : ''\n            }\n          >\n            All\n          </Link>\n        </li>\n\n        <li>\n          <Link\n            className={filter === Filter.Active ? 'selected' : ''}\n            to={Filter.Active}\n          >\n            Active\n          </Link>\n        </li>\n\n        <li>\n          <Link\n            className={filter === Filter.Completed ? 'selected' : ''}\n            to={Filter.Completed}\n          >\n            Completed\n          </Link>\n\n        </li>\n\n      </ul>\n\n      {todoList.find(todo => todo.completed === true) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            clearHandler();\n          }}\n        >\n\n          Clear completed\n        </button>\n      )}\n    </footer>\n\n  );\n};\n\nexport default TodosFilter;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\nimport { saveTodoList, getTodoList } from '../API';\nimport { Filter } from '../enums';\n\nexport const TodoApp: React.FC = () => {\n  const { todoFilter } = useParams();\n\n  const [inputValue, setInputValue] = useState<string>('');\n  const [todoList, setTodoList] = useState<Todo[]>(getTodoList());\n  const [todoListSelected, setTodoListSelected] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    switch (todoFilter) {\n      case Filter.Active:\n        setTodoListSelected(todoList.filter(todo => todo.completed === false));\n        break;\n      case Filter.Completed:\n        setTodoListSelected(todoList.filter(todo => todo.completed === true));\n        break;\n      case Filter.All:\n      default:\n        setTodoListSelected(todoList);\n        break;\n    }\n  }, [todoList, todoFilter]);\n\n  useEffect(() => {\n    saveTodoList(todoList);\n  }, [todoList]);\n\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (inputValue.length !== 0 && inputValue.trim() !== '') {\n      setTodoList([...todoList, {\n        id: +(new Date()),\n        completed: false,\n        title: inputValue,\n      }]);\n      setInputValue('');\n    }\n  };\n\n  const toggleClass = (index: number) => {\n    const updatedTodoList = [...todoList];\n\n    updatedTodoList[index].completed = !updatedTodoList[index].completed;\n    setTodoList(updatedTodoList);\n  };\n\n  const destroyHandler = (index: number) => {\n    const filtered = todoList.filter((_el, i) => i !== index);\n\n    setTodoList(filtered);\n  };\n\n  const clearHandler = () => {\n    setTodoList(todoList.filter(todo => todo.completed === false));\n  };\n\n  const changeTodo = (todoValue: string, index: number) => {\n    const todoListCopy = [...todoList];\n\n    todoListCopy[index].title = todoValue;\n\n    setTodoList(todoListCopy);\n  };\n\n  const toggleAll = () => {\n    let isCompleted = true;\n\n    if (todoList.find(todo => todo.completed === false) === undefined) {\n      isCompleted = false;\n    }\n\n    const todoListToggled = todoList.map(todo => (\n      { ...todo, completed: isCompleted }));\n\n    setTodoList(todoListToggled);\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            data-cy=\"createTodo\"\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            id=\"idinput\"\n            value={inputValue}\n            onChange={inputHandler}\n          />\n        </form>\n      </header>\n      <TodoList\n        todoList={todoListSelected}\n        destroyHandler={destroyHandler}\n        toggleClass={toggleClass}\n        changeTodo={changeTodo}\n        toggleAll={toggleAll}\n      />\n      {todoList.length > 0\n        && (\n          <TodosFilter\n            todoList={todoList}\n            clearHandler={clearHandler}\n            filter={todoFilter}\n          />\n        )}\n    </>\n  );\n};\n\nexport default TodoApp;\n","export const getTodoList = (): Todo[] => {\n  const todoListString = localStorage.getItem('todoList');\n\n  if (todoListString === null) {\n    return [];\n  }\n\n  const todoList = JSON.parse(todoListString);\n\n  return todoList;\n};\n\nexport const saveTodoList = (todoList: Todo[]) => {\n  localStorage.setItem('todoList', JSON.stringify(todoList));\n};\n","import {\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { TodoApp } from './TodoApp';\n\nexport const App = () => (\n\n  <section className=\"todoapp\">\n    <Routes>\n      <Route path=\"/\" element={<TodoApp />}>\n        <Route index element={<TodoApp />} />\n        <Route\n          path=\":todoFilter\"\n          element={(\n            <TodoApp />\n          )}\n        />\n      </Route>\n    </Routes>\n  </section>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './Components/App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}